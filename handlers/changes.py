from vkbottle.bot import Message, BotLabeler
from vkbottle import Keyboard, Text
from vkbottle.dispatch.rules.base import PayloadMapRule
from datetime import datetime, timedelta
from utils.image_utils import downloadimages, upload_photo
import os
bl = BotLabeler()
bl.vbml_ignore_case = True

@bl.private_message(command="changes")
@bl.private_message(text="–ò–∑–º–µ–Ω–µ–Ω–∏—è")
async def show_changes(message: Message):
    keyboard = Keyboard(inline=True)
    keyboard.add(Text("‚è∏ –°–µ–≥–æ–¥–Ω—è", payload={"command": "changes_now"}))
    keyboard.row()
    keyboard.add(Text("‚ñ∂Ô∏è –ó–∞–≤—Ç—Ä–∞", payload={"command": "changes_tomorrow"}))
    keyboard.row()
    keyboard.add(Text("‚è© –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", payload={"command": "changes_totomorrow"}))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", keyboard=keyboard)

async def handle_changes(message: Message, days_offset: int, day_name: str):
    paths = downloadimages()
    now = datetime.now()
    target_date = (now + timedelta(days=days_offset)).strftime("%d.%m")
    count = 0
    for path in paths:
        if target_date in path:
            count += 1
            photo = await upload_photo(message.ctx_api, path)
            await message.answer(
                message=f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ {day_name}",
                attachment=f"photo{photo[0].owner_id}_{photo[0].id}"
            )
        os.remove(path)
        
    if count == 0:
        await message.answer(f'üòî –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ {day_name} –Ω–µ—Ç!')

@bl.private_message(payload={"command": "changes_now"})
async def changes_now(message: Message):
    await handle_changes(message, 0, "—Å–µ–≥–æ–¥–Ω—è")

@bl.private_message(payload={"command": "changes_tomorrow"})
async def changes_tomorrow(message: Message):
    await handle_changes(message, 1, "–∑–∞–≤—Ç—Ä–∞")

@bl.private_message(payload={"command": "changes_totomorrow"})
async def changes_totomorrow(message: Message):
    await handle_changes(message, 2, "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞") 