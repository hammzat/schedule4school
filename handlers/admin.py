from vkbottle.bot import Message, BotLabeler
from vkbottle import Keyboard, KeyboardButtonColor, Text
from vkbottle.dispatch.rules.base import PayloadMapRule
from utils.classes import is_valid_class
from utils.db import Database
from utils.other import isAdmin
from config import state_dispenser
from models.rules import NeedAdmin, HasBroadcastState
import loguru
import os
import requests
import re

db = Database()
bl = BotLabeler()
bl.vbml_ignore_case = True
@bl.private_message(text="–∞–¥–º–∏–Ω")
@bl.private_message(command="admin")
@bl.private_message(PayloadMapRule({"admin_command": "admin"}))
async def admin_panel(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    keyboard = Keyboard(inline=True)
    keyboard.add(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", payload={"admin_command": "stats"}))
    keyboard.row()
    keyboard.add(Text("üì® –†–∞—Å—Å—ã–ª–∫–∞", payload={"admin_command": "broadcast"}))
    keyboard.row()
    keyboard.add(Text("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", payload={"admin_command": "schedule_manage"}))
    
    await message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=keyboard
    )

@bl.private_message(PayloadMapRule({"admin_command": "stats"}))
async def admin_stats(message: Message):
    if not await isAdmin(message, message.from_id):
        return
        
    try:
        cursor, conn = db.connect()
        
        cursor.execute("SELECT COUNT(*) as total FROM users")
        total_users = cursor.fetchone()['total']
        
        cursor.execute("""
            SELECT class, COUNT(*) as count 
            FROM users 
            GROUP BY class 
            ORDER BY class
        """)
        class_stats = cursor.fetchall()
        
        cursor.execute("""
            SELECT 
                SUM(VK_sendNotify) as notify_enabled,
                SUM(VK_sendRassilka) as rassilka_enabled,
                SUM(send_newSchedule) as new_schedule_enabled,
                SUM(send_tomorrowSchedule) as tomorrow_enabled,
                SUM(send_todaySchedule) as today_enabled
            FROM users
        """)
        settings_stats = cursor.fetchone()
        
        stats_msg = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}

üìö –ü–æ –∫–ª–∞—Å—Å–∞–º:..
{chr(10).join(f"- {row['class']}: {row['count']} —É—á–µ–Ω–∏–∫–æ–≤" for row in class_stats)}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {settings_stats['notify_enabled']}
- –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {settings_stats['rassilka_enabled']}
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {settings_stats['new_schedule_enabled']}
- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {settings_stats['tomorrow_enabled']}
- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {settings_stats['today_enabled']}"""

        keyboard = Keyboard(inline=True)
        keyboard.add(Text("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", payload={"admin_command": "admin"}))
        
        await message.answer(stats_msg, keyboard=keyboard)
        
    except Exception as e:
        loguru.logger.error(f"Error in admin_stats: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        conn.close()

@bl.private_message(PayloadMapRule({"admin_command": "broadcast"}))
async def admin_broadcast(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    await state_dispenser.set(message.from_id, "waiting_message")
    
    keyboard = Keyboard(inline=True)
    keyboard.add(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", payload={"admin_command": "cancel_broadcast"}))
    
    await message.answer(
        "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ç–∫–∞, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        keyboard=keyboard
    )

@bl.private_message(HasBroadcastState())
async def handle_broadcast_message(message: Message):
    if not await isAdmin(message, message.from_id):
        return
        
    state = await state_dispenser.get(message.from_id)
    if state and state.state == "waiting_message":
        try:
            cursor, conn = db.connect()
            cursor.execute("SELECT VK_id FROM users WHERE VK_sendRassilka = 1")
            users = cursor.fetchall()
            
            success_count = 0
            total_users = len(users)
            
            attachment = None
            if message.attachments and len(message.attachments) > 0:
                if message.attachments[0].photo:
                    photo = message.attachments[0].photo
                    largest_size = max(photo.sizes, key=lambda size: size.height * size.width)
                    photo_data = requests.get(largest_size.url).content
                    
                    upload_server = await message.ctx_api.photos.get_messages_upload_server()
                    
                    with open('temp_photo.jpg', 'wb') as f:
                        f.write(photo_data)
                    
                    with open('temp_photo.jpg', 'rb') as f:
                        response = requests.post(upload_server.upload_url, files={'photo': f}).json()
                    
                    saved_photo = await message.ctx_api.photos.save_messages_photo(
                        photo=response["photo"],
                        server=response["server"],
                        hash=response["hash"]
                    )
                    
                    os.remove('temp_photo.jpg')
                    
                    attachment = f"photo{saved_photo[0].owner_id}_{saved_photo[0].id}"
            
            for user in users:
                try:
                    await message.ctx_api.messages.send(
                        peer_id=user['VK_id'],
                        message=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}",
                        attachment=attachment,
                        random_id=0
                    )
                    success_count += 1
                except Exception as e:
                    loguru.logger.error(f"Error sending broadcast to user {user['VK_id']}: {str(e)}")
                    continue
            
            await state_dispenser.delete(message.from_id)
            
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            await admin_panel(message)
            
        except Exception as e:
            loguru.logger.error(f"Error in broadcast: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
        finally:
            if 'conn' in locals():
                conn.close()
            if os.path.exists('temp_photo.jpg'):
                os.remove('temp_photo.jpg') 

@bl.private_message(command="upload_schedule")
async def upload_schedule_txt(message: Message):
    if not await isAdmin(message, message.from_id):
        return
        
    try:
        if not message.attachments or message.attachments[0].doc is None:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª schedules.txt —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
            return
            
        doc = message.attachments[0].doc
        response = requests.get(doc.url)
        response.encoding = 'utf-8'
        if response.status_code != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
            return
            
        content = response.text
        loguru.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –¥–ª–∏–Ω–∞: {len(content)}")
        
        if not content.startswith("--start--") or not content.endswith("--end--"):
            loguru.logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Ñ–∞–π–ª–∞. –ù–∞—á–∞–ª–æ: {content[:20]}, –ö–æ–Ω–µ—Ü: {content[-20:]}")
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            return
            
        days_blocks = content.split("--day--")[1:]
        loguru.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –¥–Ω–µ–π: {len(days_blocks)}")
        
        success_count = 0
        for i, block in enumerate(days_blocks, 1):
            try:
                if "--end day--" not in block:
                    continue
                    
                schedule_text = block.split("--end day--")[0].strip()
                lines = schedule_text.split('\n')
                if not lines:
                    continue
                    
                first_line = lines[0].strip().lower()
                class_name, day = first_line.split()
                
                if not is_valid_class(class_name):
                    continue
                    
                if day not in ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']:
                    continue
                    
                lessons = []
                for line in lines[1:]:
                    if not line.strip():
                        continue
                    match = re.match(r'(\d+)\.\s+(.+?)(?:\s+\((–∫–∞–±\.\s*)?(\d+(?:/[^/\s]+)?)\)(?:/(\w+))?)?$', line.strip())
                    if match:
                        num, subject, _, room, additional = match.groups()
                        if room and additional == "–∏–Ω—Ñ–æ—Ä–º":
                            room = f"{room}/–∏–Ω—Ñ–æ—Ä–º"
                        lessons.append({
                            'lesson_number': int(num),
                            'subject': subject.strip(),
                            'room': room if room else ''
                        })
                    else:
                        loguru.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —É—Ä–æ–∫–∞: '{line.strip()}'")
                
                if lessons:
                    db.save_schedule(class_name, day, lessons)
                    success_count += 1
                
            except Exception as e:
                loguru.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {i}: {e}")
                continue
                
        if success_count > 0:
            await message.answer(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {success_count} –¥–Ω–µ–π")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        loguru.logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ upload_schedule: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@bl.private_message(PayloadMapRule({"admin_command": "cancel_broadcast"}))
async def cancel_broadcast(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    await state_dispenser.delete(message.from_id)
    await admin_panel(message)

@bl.private_message(PayloadMapRule({"admin_command": "schedule_manage"}))
async def admin_schedule(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    keyboard = Keyboard(inline=True)
    keyboard.add(Text("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", payload={"admin_command": "export_schedule"}))
    keyboard.row()
    keyboard.add(Text("üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", payload={"admin_command": "clear_schedule"}))
    keyboard.row()
    keyboard.add(Text("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", payload={"admin_command": "admin"}))
    
    await message.answer(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=keyboard
    )

@bl.private_message(PayloadMapRule({"admin_command": "clear_schedule"}))
async def admin_clear_schedule(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    keyboard = Keyboard(inline=True)
    keyboard.add(Text("‚ùå –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", payload={"admin_command": "clear_schedule_confirm"}), color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text("‚úÖ –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", payload={"admin_command": "schedule_manage"}), color=KeyboardButtonColor.POSITIVE)
    
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!",
        keyboard=keyboard
    )

@bl.private_message(PayloadMapRule({"admin_command": "clear_schedule_confirm"}))
async def admin_clear_schedule_confirm(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    try:
        db.clear_schedule()
        
        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ")
        await admin_schedule(message)
        
    except Exception as e:
        loguru.logger.error(f"Error in clear_schedule: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@bl.private_message(PayloadMapRule({"admin_command": "export_schedule"}))
async def admin_export_schedule(message: Message):
    if not await isAdmin(message, message.from_id):
        return
    try:
        with open("schedules.txt", "w", encoding="utf-8") as f:
            f.write("--start--\n")
            
            cursor, conn = db.connect()
            cursor.execute("""
                SELECT class_name, day_of_week, lesson_number, subject, room_number
                FROM schedule
                ORDER BY class_name, day_of_week, lesson_number
            """)
            
            current_class = None
            current_day = None
            
            for row in cursor.fetchall():
                if current_class != row[0] or current_day != row[1]:
                    if current_class is not None:
                        f.write("--end day--\n")
                    f.write("--day--\n")
                    f.write(f"{row[0]} {row[1]}\n")
                    current_class = row[0]
                    current_day = row[1]
                
                room_str = f" (–∫–∞–±. {row[4]})" if row[4] else ""
                f.write(f"{row[2]}. {row[3]}{room_str}\n")
            
            if current_class is not None:
                f.write("--end day--\n")
            f.write("--end--")
        
        doc = await message.ctx_api.docs.get_messages_upload_server(peer_id=message.peer_id)
        response = requests.post(doc.upload_url, files={'file': open('schedules.txt', 'rb')}).json()
        file = await message.ctx_api.docs.save(file=response['file'], title='schedules.txt')
        os.remove('schedules.txt')
        
        await message.answer(
            "üì§ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≥—Ä—É–∂–µ–Ω–æ –≤ —Ñ–∞–π–ª:",
            attachment=f"doc{file.doc.owner_id}_{file.doc.id}"
        )
        
    except Exception as e:
        loguru.logger.error(f"Error in export_schedule: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    finally:
        if 'conn' in locals():
            conn.close()